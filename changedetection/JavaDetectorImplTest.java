import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

public class JavaDetectorImplTest {

  private static final String SAMPLE_CODE_ORIGIN =
          "\n"
                  + "\n"
                  + "  private List<String> reserved = new ArrayList();\n"
                  + "  private List<FunctionDescription> funcDescList = new ArrayList();\n"
                  + "  private List<ClassDescription> classDescList = new ArrayList();\n"
                  + "\n"
                  + "  // TODO (rmartin) Hacky please fix\n"
                  + "  public JavaDetectorImpl() {\n"
                  + "    this.reserved = null;\n"
                  + "    this.funcDescList = null;\n"
                  + "    this.classDescList = null;\n"
                  + "  }\n"
                  + "\n"
                  + "  /**\n"
                  + "   * TODO (rmartin) Finish this function\n"
                  + "   *\n"
                  + "   * @return List<String> of the reserved words for our libraries\n"
                  + "   */\n"
                  + "  public static List<String> getReservedLibraries(List<String> libraries) {\n"
                  + "    return null;\n"
                  + "  }\n"
                  + "\n"
                  + "  @Override\n"
                  + "  public String toString() {\n"
                  + "    return \"JavaDetectorImpl{\"\n"
                  + "        + \"reserved=\"\n"
                  + "        + reserved\n"
                  + "        + \", funcDescList=\"\n"
                  + "        + funcDescList\n"
                  + "        + \", classDescList=\"\n"
                  + "        + classDescList\n"
                  + "        + '}';\n"
                  + "  }\n"
                  + "\n"
                  + "  @Override\n"
                  + "  public int hashCode() {\n"
                  + "\n"
                  + "    return Objects.hash(reserved, funcDescList, classDescList);\n"
                  + "  }\n"
                  + "\n"
                  + "  /**\n"
                  + "   * This function detects functions and sets the funcDescList full of them\n"
                  + "   *\n"
                  + "   * @param origin The previous code\n"
                  + "   * @param current The current code\n"
                  + "   */\n"
                  + "  public void detectFunctions(String origin, String current) {\n"
                  + "    origin = origin.toLowerCase();\n"
                  + "    current = current.toLowerCase();\n"
                  + "    String diff = difference(origin, current);\n"
                  + "\n"
                  + "    // TODO (rmartin) Add Vanilla Javas reserved words to our List\n"
                  + "    // TODO (rmartin) Detect Java Version for these?\n"
                  + "    // TODO (rmartin) make sure to check we arent adding these\n"
                  + "    ProjUtil.getReserved(\"/ReservedData/java_reserved.txt\");\n"
                  + "\n"
                  + "    // Get reserved words for installed plugins and libraries\n"
                  + "    // getReservedLibraries call\n"
                  + "\n"
                  + "    List checkedIndices = new ArrayList();\n"
                  + "    List<FunctionDescription> functionByName = new ArrayList<>();\n"
                  + "\n"
                  + "    for (int i = 0; i < diff.length(); i++) {\n"
                  + "\n"
                  + "      // TODO (rmartin) turn this into a regex where the bracket needs to be lead by a char\n"
                  + "      if (diff.charAt(i) == '(') {\n"
                  + "        checkedIndices.add(i);\n"
                  + "      }\n"
                  + "      i++;\n"
                  + "    }\n"
                  + "\n"
                  + "    // Here we need to go to the first word before the indices and then grab the function and add to\n"
                  + "    // our function\n"
                  + "    // list iff it is not reserved\n"
                  + "\n"
                  + "    for (Object checkedIndice : checkedIndices) {\n"
                  + "      String name = \"\";\n"
                  + "      String accessMod = \"\";\n"
                  + "      String retType = \"\";\n"
                  + "      boolean stat = false;\n"
                  + "      List<String> arguments = new ArrayList<>();\n"
                  + "\n"
                  + "      int curIndex = (int) checkedIndice;\n"
                  + "      int lastLoc = 0;\n"
                  + "\n"
                  + "      // Function Name\n"
                  + "      while (curIndex > 0 && diff.charAt(curIndex) != ' ') {\n"
                  + "        curIndex--;\n"
                  + "      }\n"
                  + "      lastLoc = curIndex - 1;\n"
                  + "      name = diff.substring(curIndex, (int) checkedIndice);\n"
                  + "\n"
                  + "      // Return Value\n"
                  + "      while (curIndex > 0 && diff.charAt(curIndex) != ' ') {\n"
                  + "        curIndex--;\n"
                  + "      }\n"
                  + "      retType = diff.substring(curIndex, (lastLoc));\n"
                  + "      lastLoc = curIndex - 1;\n"
                  + "\n"
                  + "      // Static (boolean)\n"
                  + "      while (curIndex > 0 && diff.charAt(curIndex) != ' ') {\n"
                  + "        curIndex--;\n"
                  + "      }\n"
                  + "      lastLoc = curIndex - 1;\n"
                  + "      stat = diff.substring(curIndex, (int) checkedIndice).contains(\"static\");\n"
                  + "\n"
                  + "      if (stat) {\n"
                  + "        // Function is Static\n"
                  + "        // Access Modifier\n"
                  + "        while (curIndex > 0 && diff.charAt(curIndex) != ' ') {\n"
                  + "          curIndex--;\n"
                  + "        }\n"
                  + "        accessMod = diff.substring(curIndex, (lastLoc));\n"
                  + "        lastLoc = curIndex - 1;\n"
                  + "      } else {\n"
                  + "        // Function isn't Static\n"
                  + "        // Access Modifier\n"
                  + "        accessMod = diff.substring(curIndex, (int) checkedIndice);\n"
                  + "      }\n"
                  + "    }\n"
                  + "  }\n"
                  + "\n"
                  + "  /**\n"
                  + "   * This function detects classes in code and sets the classDescList full of them\n"
                  + "   *\n"
                  + "   * @param origin The previous code\n"
                  + "   * @param current The current code\n"
                  + "   */\n"
                  + "  public void detectClasses(String origin, String current) {\n"
                  + "    //    StringBuilder message = new StringBuilder();\n"
                  + "    //\n"
                  + "    //    for (ClassDescription classDescription : ) {\n"
                  + "    //      // Message Logic\n"
                  + "    //    }\n"
                  + "  }\n"
                  + "\n"
                  + "  public List<String> getReserved() {\n"
                  + "    return reserved;\n"
                  + "  }\n"
                  + "\n"
                  + "  public void setReserved(List<String> reserved) {\n"
                  + "    this.reserved = reserved;\n"
                  + "  }\n"
                  + "\n"
                  + "  public List<FunctionDescription> getFuncDescList() {\n"
                  + "    return funcDescList;\n"
                  + "  }\n"
                  + "\n"
                  + "  public void setFuncDescList(List<FunctionDescription> funcDescList) {\n"
                  + "    this.funcDescList = funcDescList;\n"
                  + "  }\n"
                  + "\n"
                  + "  public List<ClassDescription> getClassDescList() {\n"
                  + "    return classDescList;\n"
                  + "  }\n"
                  + "\n"
                  + "  public void setClassDescList(List<ClassDescription> classDescList) {\n"
                  + "    this.classDescList = classDescList;\n"
                  + "  }\n"
                  + "\n"
                  + "  /**\n"
                  + "   * Generates a message for summarizing the functions passed in\n"
                  + "   *\n"
                  + "   * @param functionDescriptions The functions to be described\n"
                  + "   * @return The message\n"
                  + "   */\n"
                  + "  public String getMessageFunctionsJava(ArrayList<FunctionDescription> functionDescriptions) {\n"
                  + "    StringBuilder message = new StringBuilder();\n"
                  + "\n"
                  + "    for (FunctionDescription functionDescription : functionDescriptions) {\n"
                  + "      message.append(functionDescription.toMessage()); // TODO args\n"
                  + "    }\n"
                  + "\n"
                  + "    return message.toString();\n"
                  + "  }\n"
                  + "\n"
                  + "  /**\n"
                  + "   * Generates a message for summarizing the classes passed in\n"
                  + "   *\n"
                  + "   * @param classDescriptions The classes to be described\n"
                  + "   * @return The message\n"
                  + "   */\n"
                  + "  public String getMessageClassesJava(ArrayList<ClassDescription> classDescriptions) {\n"
                  + "    StringBuilder message = new StringBuilder();\n"
                  + "\n"
                  + "    for (ClassDescription classDescription : classDescriptions) {\n"
                  + "      message.append(classDescription.toMessage()); // TODO args\n"
                  + "    }\n"
                  + "\n"
                  + "    return message.toString();\n"
                  + "  }";

  private static final String SAMPLE_CODE_CURRENT =
          "\n"
                  + "\n"
                  + "  private List<String> reserved = new ArrayList();\n"
                  + "  private List<FunctionDescription> funcDescList = new ArrayList();\n"
                  + "  private List<ClassDescription> classDescList = new ArrayList();\n"
                  + "\n"
                  + "  // TODO (rmartin) Hacky please fix\n"
                  + "  public JavaDetectorImpl() {\n"
                  + "    this.reserved = null;\n"
                  + "    this.funcDescList = null;\n"
                  + "    this.classDescList = null;\n"
                  + "  }\n"
                  + "\n"
                  + "  /**\n"
                  + "   * TODO (rmartin) Finish this function\n"
                  + "   *\n"
                  + "   * @return List<String> of the reserved words for our libraries\n"
                  + "   */\n"
                  + "  public static List<String> getReservedLibraries(List<String> libraries) {\n"
                  + "    return null;\n"
                  + "  }\n"
                  + "\n"
                  + "  @Override\n"
                  + "  public String toString() {\n"
                  + "    return \"JavaDetectorImpl{\"\n"
                  + "        + \"reserved=\"\n"
                  + "        + reserved\n"
                  + "        + \", funcDescList=\"\n"
                  + "        + funcDescList\n"
                  + "        + \", classDescList=\"\n"
                  + "        + classDescList\n"
                  + "        + '}';\n"
                  + "  }\n"
                  + "\n"
                  + "  @Override\n"
                  + "  public boolean equals(Object o) {\n"
                  + "    if (this == o) return true;\n"
                  + "    if (o == null || getClass() != o.getClass()) return false;\n"
                  + "    JavaDetectorImpl that = (JavaDetectorImpl) o;\n"
                  + "    return Objects.equals(reserved, that.reserved)\n"
                  + "        && Objects.equals(funcDescList, that.funcDescList)\n"
                  + "        && Objects.equals(classDescList, that.classDescList);\n"
                  + "  }\n"
                  + "\n"
                  + "  @Override\n"
                  + "  public int hashCode() {\n"
                  + "\n"
                  + "    return Objects.hash(reserved, funcDescList, classDescList);\n"
                  + "  }\n"
                  + "\n"
                  + "  /**\n"
                  + "   * This function detects functions and sets the funcDescList full of them\n"
                  + "   *\n"
                  + "   * @param origin The previous code\n"
                  + "   * @param current The current code\n"
                  + "   */\n"
                  + "  public void detectFunctions(String origin, String current) {\n"
                  + "    origin = origin.toLowerCase();\n"
                  + "    current = current.toLowerCase();\n"
                  + "    String diff = difference(origin, current);\n"
                  + "\n"
                  + "    // TODO (rmartin) Add Vanilla Javas reserved words to our List\n"
                  + "    // TODO (rmartin) Detect Java Version for these?\n"
                  + "    // TODO (rmartin) make sure to check we arent adding these\n"
                  + "    ProjUtil.getReserved(\"/ReservedData/java_reserved.txt\");\n"
                  + "\n"
                  + "    // Get reserved words for installed plugins and libraries\n"
                  + "    // getReservedLibraries call\n"
                  + "\n"
                  + "    List checkedIndices = new ArrayList();\n"
                  + "    List<FunctionDescription> functionByName = new ArrayList<>();\n"
                  + "\n"
                  + "    for (int i = 0; i < diff.length(); i++) {\n"
                  + "\n"
                  + "      // TODO (rmartin) turn this into a regex where the bracket needs to be lead by a char\n"
                  + "      if (diff.charAt(i) == '(') {\n"
                  + "        checkedIndices.add(i);\n"
                  + "      }\n"
                  + "      i++;\n"
                  + "    }\n"
                  + "\n"
                  + "    // Here we need to go to the first word before the indices and then grab the function and add to\n"
                  + "    // our function\n"
                  + "    // list iff it is not reserved\n"
                  + "\n"
                  + "    for (Object checkedIndice : checkedIndices) {\n"
                  + "      String name = \"\";\n"
                  + "      String accessMod = \"\";\n"
                  + "      String retType = \"\";\n"
                  + "      boolean stat = false;\n"
                  + "      List<String> arguments = new ArrayList<>();\n"
                  + "\n"
                  + "      int curIndex = (int) checkedIndice;\n"
                  + "      int lastLoc = 0;\n"
                  + "\n"
                  + "      // Function Name\n"
                  + "      while (curIndex > 0 && diff.charAt(curIndex) != ' ') {\n"
                  + "        curIndex--;\n"
                  + "      }\n"
                  + "      lastLoc = curIndex - 1;\n"
                  + "      name = diff.substring(curIndex, (int) checkedIndice);\n"
                  + "\n"
                  + "      // Return Value\n"
                  + "      while (curIndex > 0 && diff.charAt(curIndex) != ' ') {\n"
                  + "        curIndex--;\n"
                  + "      }\n"
                  + "      retType = diff.substring(curIndex, (lastLoc));\n"
                  + "      lastLoc = curIndex - 1;\n"
                  + "\n"
                  + "      // Static (boolean)\n"
                  + "      while (curIndex > 0 && diff.charAt(curIndex) != ' ') {\n"
                  + "        curIndex--;\n"
                  + "      }\n"
                  + "      lastLoc = curIndex - 1;\n"
                  + "      stat = diff.substring(curIndex, (int) checkedIndice).contains(\"static\");\n"
                  + "\n"
                  + "      if (stat) {\n"
                  + "        // Function is Static\n"
                  + "        // Access Modifier\n"
                  + "        while (curIndex > 0 && diff.charAt(curIndex) != ' ') {\n"
                  + "          curIndex--;\n"
                  + "        }\n"
                  + "        accessMod = diff.substring(curIndex, (lastLoc));\n"
                  + "        lastLoc = curIndex - 1;\n"
                  + "      } else {\n"
                  + "        // Function isn't Static\n"
                  + "        // Access Modifier\n"
                  + "        accessMod = diff.substring(curIndex, (int) checkedIndice);\n"
                  + "      }\n"
                  + "    }\n"
                  + "  }\n"
                  + "\n"
                  + "  /**\n"
                  + "   * This function detects classes in code and sets the classDescList full of them\n"
                  + "   *\n"
                  + "   * @param origin The previous code\n"
                  + "   * @param current The current code\n"
                  + "   */\n"
                  + "  public void detectClasses(String origin, String current) {\n"
                  + "    //    StringBuilder message = new StringBuilder();\n"
                  + "    //\n"
                  + "    //    for (ClassDescription classDescription : ) {\n"
                  + "    //      // Message Logic\n"
                  + "    //    }\n"
                  + "  }\n"
                  + "\n"
                  + "  public List<String> getReserved() {\n"
                  + "    return reserved;\n"
                  + "  }\n"
                  + "\n"
                  + "  public void setReserved(List<String> reserved) {\n"
                  + "    this.reserved = reserved;\n"
                  + "  }\n"
                  + "\n"
                  + "  public List<FunctionDescription> getFuncDescList() {\n"
                  + "    return funcDescList;\n"
                  + "  }\n"
                  + "\n"
                  + "  public void setFuncDescList(List<FunctionDescription> funcDescList) {\n"
                  + "    this.funcDescList = funcDescList;\n"
                  + "  }\n"
                  + "\n"
                  + "  public List<ClassDescription> getClassDescList() {\n"
                  + "    return classDescList;\n"
                  + "  }\n"
                  + "\n"
                  + "  public void setClassDescList(List<ClassDescription> classDescList) {\n"
                  + "    this.classDescList = classDescList;\n"
                  + "  }\n"
                  + "\n"
                  + "  /**\n"
                  + "   * Generates a message for summarizing the functions passed in\n"
                  + "   *\n"
                  + "   * @param functionDescriptions The functions to be described\n"
                  + "   * @return The message\n"
                  + "   */\n"
                  + "  public String getMessageFunctionsJava(ArrayList<FunctionDescription> functionDescriptions) {\n"
                  + "    StringBuilder message = new StringBuilder();\n"
                  + "\n"
                  + "    for (FunctionDescription functionDescription : functionDescriptions) {\n"
                  + "      message.append(functionDescription.toMessage()); // TODO args\n"
                  + "    }\n"
                  + "\n"
                  + "    return message.toString();\n"
                  + "  }\n"
                  + "\n"
                  + "  /**\n"
                  + "   * Generates a message for summarizing the classes passed in\n"
                  + "   *\n"
                  + "   * @param classDescriptions The classes to be described\n"
                  + "   * @return The message\n"
                  + "   */\n"
                  + "  public String getMessageClassesJava(ArrayList<ClassDescription> classDescriptions) {\n"
                  + "    StringBuilder message = new StringBuilder();\n"
                  + "\n"
                  + "    for (ClassDescription classDescription : classDescriptions) {\n"
                  + "      message.append(classDescription.toMessage()); // TODO args\n"
                  + "    }\n"
                  + "\n"
                  + "    return message.toString();\n"
                  + "  }";

  @Test
  public void detectFunctionsTest() {
    JavaDetectorImpl detector = new JavaDetectorImpl();
    detector.detectFunctions(SAMPLE_CODE_ORIGIN, SAMPLE_CODE_CURRENT);
  }

  @Test
  public void detectClassesTest() {

  }

  @Test
  public void getMessageFunctionsJavaTest() {
    // Test Code Here
  }

  @Test
  public void getMessageClassesJavaTest() {
    // Test Code Here
  }
}
